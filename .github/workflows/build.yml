on:
  push:
    branches:
      - master

name: JRCMPC API WORKFLOW 

jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1

      - name: COPY ENVIRONMENT FILES
        run: php -r "file_exists('.env') || copy('.env.prod', '.env');"

      - name: INSTALL COMPOSER DEPENDENCIES
        run: composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts

      - name: GENERATE APPLICATION KEY
        run: |
          php artisan cache:clear
          php artisan config:clear
          php artisan key:generate

      - name: RUN UNIT TESTS
        run: vendor/bin/phpunit

      - name: CONFIGURE AWS CREDENTIALS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: LOGIN TO AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: BUILD IMAGE AND PUSH TO AWS ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: jrcmpc-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f build_config/app.dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#       - name: UPDATE TASK DEFINITION
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: build_config/task-definition.json
#           container-name: ecommerce-container
#           image: ${{ steps.build-image.outputs.image }}

#       - name: DEPLOY TASK DEFINITION TO AWS ECS
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ecommerce-cluster-service
#           cluster: decathlon-ecommerce-cluster
#           wait-for-service-stability: true
